generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
  // directUrl = env("DIRECT_URL")

}

model Users {
  id              String            @id @default(uuid())
  admin           Boolean           @default(false)
  username        String            @unique
  password        String
  email           String?           @unique
  verified        Boolean           @default(false)
  lastLogin       DateTime          @default(now()) @db.Date
  tokens          Token?
  preferences     UserPreferences?
  weights         WeightEntry[]
  workouts        Workout[]
  WorkoutTemplate WorkoutTemplate[]

  @@map("users")
}

model Workout {
  id             Int              @id @default(autoincrement())
  name           String
  sets           Int
  reps           String
  amrap          Boolean          @default(false)
  type           split
  supersettedId  Int?             @unique
  alternateId    Int?             @unique
  alt            Boolean          @default(false)
  ss             Boolean          @default(false)
  isTemplate     Boolean          @default(false)
  templateId     Int?
  workoutId      Int?
  isGlobal       Boolean          @default(true)
  userId         String?
  weights        WeightEntry[]
  alternate      Workout?         @relation("Alternate", fields: [alternateId], references: [id])
  primary        Workout?         @relation("Alternate")
  relatedWorkout Workout?         @relation("RelatedWorkouts", fields: [workoutId], references: [id], map: "workout_related_fkey")
  relatedTo      Workout[]        @relation("RelatedWorkouts")
  supersetted    Workout?         @relation("Superset", fields: [supersettedId], references: [id])
  superset       Workout?         @relation("Superset")
  parentTemplate WorkoutTemplate? @relation("TemplateToWorkout", fields: [templateId], references: [id])
  user           Users?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workout")
}

model WorkoutTemplate {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workouts    Workout[] @relation("TemplateToWorkout")
  user        Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workout_template")
}

model WeightEntry {
  id        Int      @id @default(autoincrement())
  userId    String
  workoutId Int
  weight    Int
  date      DateTime @default(now()) @db.Date
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("weightentry")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '01:00:00'::interval)"))
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model UserPreferences {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  templateOrder String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

enum split {
  push
  pull
  legs
}
